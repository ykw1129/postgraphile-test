"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads a set of `City`."""
  citiesList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `City`."""
    orderBy: [CitiesOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CityCondition
  ): [City!]

  """Reads a set of `Weather`."""
  weathersList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Weather`."""
    orderBy: [WeathersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WeatherCondition
  ): [Weather!]
  city(city: String!): City

  """Reads a single `City` using its globally unique `ID`."""
  cityByNodeId(
    """The globally unique `ID` to be used in selecting a single `City`."""
    nodeId: ID!
  ): City
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type City implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  city: String!
  location: Point

  """Reads and enables pagination through a set of `Weather`."""
  weathersByCityList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Weather`."""
    orderBy: [WeathersOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: WeatherCondition
  ): [Weather!]!
}

type Point {
  x: Float!
  y: Float!
}

type Weather {
  city: String
  tempLo: Int
  tempHi: Int
  prcp: Float
  date: Date

  """Reads a single `City` that is related to this `Weather`."""
  cityByCity: City
}

"""The day, does not include a time."""
scalar Date

"""Methods to use when ordering `Weather`."""
enum WeathersOrderBy {
  NATURAL
  CITY_ASC
  CITY_DESC
  TEMP_LO_ASC
  TEMP_LO_DESC
  TEMP_HI_ASC
  TEMP_HI_DESC
  PRCP_ASC
  PRCP_DESC
  DATE_ASC
  DATE_DESC
}

"""
A condition to be used against `Weather` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input WeatherCondition {
  """Checks for equality with the object’s `city` field."""
  city: String

  """Checks for equality with the object’s `tempLo` field."""
  tempLo: Int

  """Checks for equality with the object’s `tempHi` field."""
  tempHi: Int

  """Checks for equality with the object’s `prcp` field."""
  prcp: Float

  """Checks for equality with the object’s `date` field."""
  date: Date
}

"""Methods to use when ordering `City`."""
enum CitiesOrderBy {
  NATURAL
  CITY_ASC
  CITY_DESC
  LOCATION_ASC
  LOCATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `City` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CityCondition {
  """Checks for equality with the object’s `city` field."""
  city: String

  """Checks for equality with the object’s `location` field."""
  location: PointInput
}

input PointInput {
  x: Float!
  y: Float!
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `City`."""
  createCity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCityInput!
  ): CreateCityPayload

  """Creates a single `Weather`."""
  createWeather(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateWeatherInput!
  ): CreateWeatherPayload

  """Updates a single `City` using its globally unique id and a patch."""
  updateCityByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCityByNodeIdInput!
  ): UpdateCityPayload

  """Updates a single `City` using a unique key and a patch."""
  updateCity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCityInput!
  ): UpdateCityPayload

  """Deletes a single `City` using its globally unique id."""
  deleteCityByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCityByNodeIdInput!
  ): DeleteCityPayload

  """Deletes a single `City` using a unique key."""
  deleteCity(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCityInput!
  ): DeleteCityPayload
}

"""The output of our create `City` mutation."""
type CreateCityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `City` that was created by this mutation."""
  city: City

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `City` mutation."""
input CreateCityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `City` to be created by this mutation."""
  city: CityInput!
}

"""An input for mutations affecting `City`"""
input CityInput {
  city: String!
  location: PointInput
}

"""The output of our create `Weather` mutation."""
type CreateWeatherPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Weather` that was created by this mutation."""
  weather: Weather

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `City` that is related to this `Weather`."""
  cityByCity: City
}

"""All input for the create `Weather` mutation."""
input CreateWeatherInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Weather` to be created by this mutation."""
  weather: WeatherInput!
}

"""An input for mutations affecting `Weather`"""
input WeatherInput {
  city: String
  tempLo: Int
  tempHi: Int
  prcp: Float
  date: Date
}

"""The output of our update `City` mutation."""
type UpdateCityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `City` that was updated by this mutation."""
  city: City

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateCityByNodeId` mutation."""
input UpdateCityByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `City` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `City` being updated.
  """
  patch: CityPatch!
}

"""Represents an update to a `City`. Fields that are set will be updated."""
input CityPatch {
  city: String
  location: PointInput
}

"""All input for the `updateCity` mutation."""
input UpdateCityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `City` being updated.
  """
  patch: CityPatch!
  city: String!
}

"""The output of our delete `City` mutation."""
type DeleteCityPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `City` that was deleted by this mutation."""
  city: City
  deletedCityNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteCityByNodeId` mutation."""
input DeleteCityByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `City` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCity` mutation."""
input DeleteCityInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  city: String!
}
