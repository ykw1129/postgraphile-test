"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads a set of `Good`."""
  goodsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Good`."""
    orderBy: [GoodsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GoodCondition
  ): [Good!]

  """Reads a set of `Product`."""
  productsList(
    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition
  ): [Product!]
  productByProductNo(productNo: Int!): Product
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Good {
  productNo: Int
  name: String
  price: BigFloat
  discountedPrice: BigFloat
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""Methods to use when ordering `Good`."""
enum GoodsOrderBy {
  NATURAL
  PRODUCT_NO_ASC
  PRODUCT_NO_DESC
  NAME_ASC
  NAME_DESC
  PRICE_ASC
  PRICE_DESC
  DISCOUNTED_PRICE_ASC
  DISCOUNTED_PRICE_DESC
}

"""
A condition to be used against `Good` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GoodCondition {
  """Checks for equality with the object’s `productNo` field."""
  productNo: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `price` field."""
  price: BigFloat

  """Checks for equality with the object’s `discountedPrice` field."""
  discountedPrice: BigFloat
}

type Product {
  productNo: Int
  name: String
  price: BigFloat
}

"""Methods to use when ordering `Product`."""
enum ProductsOrderBy {
  NATURAL
  PRODUCT_NO_ASC
  PRODUCT_NO_DESC
  NAME_ASC
  NAME_DESC
  PRICE_ASC
  PRICE_DESC
}

"""
A condition to be used against `Product` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProductCondition {
  """Checks for equality with the object’s `productNo` field."""
  productNo: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `price` field."""
  price: BigFloat
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Good`."""
  createGood(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGoodInput!
  ): CreateGoodPayload

  """Creates a single `Product`."""
  createProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductInput!
  ): CreateProductPayload

  """Updates a single `Product` using a unique key and a patch."""
  updateProductByProductNo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductByProductNoInput!
  ): UpdateProductPayload

  """Deletes a single `Product` using a unique key."""
  deleteProductByProductNo(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductByProductNoInput!
  ): DeleteProductPayload
}

"""The output of our create `Good` mutation."""
type CreateGoodPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Good` that was created by this mutation."""
  good: Good

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Good` mutation."""
input CreateGoodInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Good` to be created by this mutation."""
  good: GoodInput!
}

"""An input for mutations affecting `Good`"""
input GoodInput {
  productNo: Int
  name: String
  price: BigFloat
  discountedPrice: BigFloat
}

"""The output of our create `Product` mutation."""
type CreateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was created by this mutation."""
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Product` mutation."""
input CreateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Product` to be created by this mutation."""
  product: ProductInput!
}

"""An input for mutations affecting `Product`"""
input ProductInput {
  productNo: Int
  name: String
  price: BigFloat
}

"""The output of our update `Product` mutation."""
type UpdateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was updated by this mutation."""
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProductByProductNo` mutation."""
input UpdateProductByProductNoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  patch: ProductPatch!
  productNo: Int!
}

"""
Represents an update to a `Product`. Fields that are set will be updated.
"""
input ProductPatch {
  productNo: Int
  name: String
  price: BigFloat
}

"""The output of our delete `Product` mutation."""
type DeleteProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was deleted by this mutation."""
  product: Product
  deletedProductNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProductByProductNo` mutation."""
input DeleteProductByProductNoInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  productNo: Int!
}
